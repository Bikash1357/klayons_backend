"""
Django settings for backend_main project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
import os

from backend_main.utils.env_utils import check_env_vars_not_null


# Load directory structure
BACKEND_MAIN_DIR = os.path.dirname(__file__)
SRC_DIR = os.path.dirname(BACKEND_MAIN_DIR)
REPO_DIR = os.path.dirname(SRC_DIR)
EMAIL_TEMPLATES_DIR = os.path.join(BACKEND_MAIN_DIR, "email-templates")


# Load env variables from file into environment only if app is in development mode
APP_MODE = os.environ.get('APP_MODE', 'DEVELOPMENT')
LOAD_ENV_FROM_FILE = os.environ.get('LOAD_ENV_FROM_FILE', "False").strip() == "True"
if APP_MODE == "DEVELOPMENT" or LOAD_ENV_FROM_FILE:
    from dotenv import load_dotenv

    load_dotenv()


# Check and load env variables from the environment
check_env_vars_not_null()
DEBUG = os.environ['DEBUG'].strip() == "True"
SECRET_KEY = os.environ['SECRET_KEY']
ALLOWED_HOSTS = os.environ['CS_ALLOWED_HOSTS'].split(",")
CORS_ALLOWED_ORIGINS = os.environ['CS_CORS_ALLOWED_ORIGINS'].split(",")
EMAIL_OTP_NUM_DIGITS = int(os.environ['EMAIL_OTP_NUM_DIGITS'])
EMAIL_OTP_LIFESPAN = int(os.environ['EMAIL_OTP_LIFESPAN'])
ACCESS_TOKEN_LIFESPAN = int(os.environ['ACCESS_TOKEN_LIFESPAN'])
REFRESH_TOKEN_LIFESPAN = int(os.environ['REFRESH_TOKEN_LIFESPAN'])
ZEPTO_MAIL_API_BASE_URL = os.environ['ZEPTO_MAIL_API_BASE_URL']
ZEPTO_MAIL_SENDERS_ADDRESS = os.environ['ZEPTO_MAIL_SENDERS_ADDRESS']
ZEPTO_MAIL_SENDERS_NAME = os.environ['ZEPTO_MAIL_SENDERS_NAME']
ZEPTO_MAIL_AUTH_TOKEN = os.environ['ZEPTO_MAIL_AUTH_TOKEN']
TESTING_DB_ACCESS_SECRET_HEADER = os.environ['TESTING_DB_ACCESS_SECRET_HEADER']
TESTING_DB_ACCESS_SECRET = os.environ['TESTING_DB_ACCESS_SECRET']
MOUNT_OPENAPI_ROUTES = os.environ['MOUNT_OPENAPI_ROUTES'] == "True"
RAZORPAY_KEY_ID = os.environ['RAZORPAY_KEY_ID']
RAZORPAY_KEY_SECRET = os.environ['RAZORPAY_KEY_SECRET']
RAZORPAY_WEBHOOK_SECRET = os.environ['RAZORPAY_WEBHOOK_SECRET']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',
    'core',
    'authentication',
    'activities',
    'payments',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'authentication.middlewares.DerivedUserMiddleware',
]

ROOT_URLCONF = 'backend_main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend_main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(REPO_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(REPO_DIR, "staticfiles")


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'authentication.CustomUser'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=ACCESS_TOKEN_LIFESPAN),
    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=REFRESH_TOKEN_LIFESPAN),

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Keep default Django loggers
    'formatters': {
        'simple': {
            'format': '[{asctime}] {levelname} {name}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'all_apps_logger': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
